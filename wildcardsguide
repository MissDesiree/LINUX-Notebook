Wildcards in Linux: A Practical Guide for Beginners
Wildcards in Linux are powerful shortcuts that help you manage and search files without needing exact names. This guide covers the five most useful wildcards and how to use them effectively in the terminal.

1. What Are Wildcards?
Wildcards are special characters that substitute for other characters in file names and paths. They help you perform bulk actions like listing, copying, removing, or moving files.

Common Wildcards:
* — Matches zero or more characters

? — Matches exactly one character

[ ] — Matches any one character from a defined set

{ } — Used to generate multiple file or directory names

2. Asterisk *: Match Everything
The asterisk is the most commonly used wildcard.

Example:
bash
Copy
Edit
ls ABC*
This lists all files that start with ABC, such as ABC1.txt, ABCD9-XYZ, etc.

Use Case:
Quickly remove files that share a naming pattern:

bash
Copy
Edit
rm ABC*
3. Question Mark ?: Match One Character
The ? wildcard is used when a single character varies.

Example:
bash
Copy
Edit
ls TE?T
Matches TEXT, TE1T, or TEaT.

4. Brackets [ ]: Match a Specific Set
Brackets let you define a set of characters to match one position.

Example:
bash
Copy
Edit
ls *[CD]*
This matches files that have either a C or D in the name, like ABCD1-XYZ or ABDC2.txt.

You can also specify ranges:

bash
Copy
Edit
ls file[1-3].txt
Matches file1.txt, file2.txt, and file3.txt.

5. Curly Braces { }: Create or Work with Groups
Braces are used to generate multiple files or commands at once.

Example:
bash
Copy
Edit
touch ABCD{1..9}-XYZ
Creates files: ABCD1-XYZ, ABCD2-XYZ, up to ABCD9-XYZ.

This saves a lot of typing when dealing with repetitive file names.

